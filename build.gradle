plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.99'
    id 'idea'

}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = project.mod_version
group = project.mod_group_id

repositories {
    flatDir { dirs "libs" }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client { client(); systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id }
        server { server(); programArgument '--nogui'; systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id }
        gameTestServer { type = "gameTestServer"; systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all',
                    '--output', file('src/generated/resources').absolutePath,
                    '--existing', file('src/main/resources').absolutePath
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods {
        "${project.mod_id}" { sourceSet(sourceSets.main) }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    localRuntime
    runtimeClasspath.extendsFrom localRuntime
}


dependencies {

    implementation group: 'com.simibubi.create', name: 'create-1.21.1-6.0.6', version: 'unspecified'
    compileOnly(files("libs/flywheel-neoforge-1.21.1-1.0.0-10.jar"))
    runtimeOnly (files("libs/flywheel-neoforge-1.21.1-1.0.0-10.jar"))
    /** Catnip 0.8.14, local jar */
    compileOnly(files("libs/Catnip-NeoForge-1.21.1-0.8.14.jar"))
    runtimeOnly (files("libs/Catnip-NeoForge-1.21.1-0.8.14.jar"))
}

tasks.register("generateModMetadata", ProcessResources) {
    def props = [
            minecraft_version       : project.minecraft_version,
            minecraft_version_range : project.minecraft_version_range,
            neo_version             : project.neo_version,
            loader_version_range    : project.loader_version_range,
            mod_id                  : project.mod_id,
            mod_name                : project.mod_name,
            mod_license             : project.mod_license,
            mod_version             : project.mod_version,
            mod_authors             : project.mod_authors,
            mod_description         : project.mod_description
    ]
    inputs.properties(props)
    expand(props)
    from 'src/main/templates'
    into 'build/generated/sources/modMetadata'
}

sourceSets.main.resources.srcDir(tasks.named("generateModMetadata"))
neoForge.ideSyncTask(tasks.named("generateModMetadata"))

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven { url = "file://${project.projectDir}/repo" }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}